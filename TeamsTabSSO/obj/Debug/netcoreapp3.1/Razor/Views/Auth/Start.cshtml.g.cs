#pragma checksum "C:\Users\t-arielfu\Projects\binglite\Microsoft-Teams-Samples\samples\tab-sso\csharp\TeamsTabSSO\Views\Auth\Start.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9fdc1a6f347874eab201c06e59a69087e28d4cb0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Auth_Start), @"mvc.1.0.view", @"/Views/Auth/Start.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\t-arielfu\Projects\binglite\Microsoft-Teams-Samples\samples\tab-sso\csharp\TeamsTabSSO\Views\_ViewImports.cshtml"
using TeamsAuthSSO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\t-arielfu\Projects\binglite\Microsoft-Teams-Samples\samples\tab-sso\csharp\TeamsTabSSO\Views\_ViewImports.cshtml"
using TeamsAuthSSO.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9fdc1a6f347874eab201c06e59a69087e28d4cb0", @"/Views/Auth/Start.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b5e871ff40c6a7b09ab0662a86a1f9bb14e95556", @"/Views/_ViewImports.cshtml")]
    public class Views_Auth_Start : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\t-arielfu\Projects\binglite\Microsoft-Teams-Samples\samples\tab-sso\csharp\TeamsTabSSO\Views\Auth\Start.cshtml"
  
    ViewBag.Title = "title";
    Layout = "_Layout"; 

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script type=\"text/javascript\">\r\n        let clientId = \'");
#nullable restore
#line 8 "C:\Users\t-arielfu\Projects\binglite\Microsoft-Teams-Samples\samples\tab-sso\csharp\TeamsTabSSO\Views\Auth\Start.cshtml"
                   Write(ViewBag.AzureClientId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
        if (clientId != undefined && clientId != null && clientId !== '') {
            microsoftTeams.initialize();
            // Get the tab context, and use the information to navigate to Azure AD login page
            microsoftTeams.getContext(function (context) {
                // Generate random state string and store it, so we can verify it in the callback
                let state = _guid();
                localStorage.setItem(""simple.state"", state);
                localStorage.removeItem(""simple.error"");
                // See https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols-implicit
                // for documentation on these query parameters
                let queryParams = {
                    client_id: clientId,
                    response_type: ""id_token token"",
                    response_mode: ""fragment"",
                    resource: ""https://graph.microsoft.com/"",
                    redirect_uri: window.location.ori");
                WriteLiteral(@"gin + ""/Auth/End"",
                    nonce: _guid(),
                    state: state,
                    // login_hint pre-fills the username/email address field of the sign in page for the user,
                    // if you know their username ahead of time.
                    login_hint: context.upn
                };
                // Go to the AzureAD authorization endpoint
                let authorizeEndpoint =
                    ""https://login.microsoftonline.com/common/oauth2/authorize?"" +
                        toQueryString(queryParams);
                window.location.assign(authorizeEndpoint);
            });
        }
        // Build query string from map of query parameter
        function toQueryString(queryParams) {
            let encodedQueryParams = [];
            for (let key in queryParams) {
                encodedQueryParams.push(
                    key + ""="" + encodeURIComponent(queryParams[key])
                );
            }
            return enco");
                WriteLiteral(@"dedQueryParams.join(""&"");
        }
        // Converts decimal to hex equivalent
        // (From ADAL.js: https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/dev/lib/adal.js)
        function _decimalToHex(number) {
            let hex = number.toString(16);
            while (hex.length < 2) {
                hex = ""0"" + hex;
            }
            return hex;
        }
        // Generates RFC4122 version 4 guid (128 bits)
        // (From ADAL.js: https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/dev/lib/adal.js)
        function _guid() {
            // RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or
            // pseudo-random numbers.
            // The algorithm is as follows:
            //     Set the two most significant bits (bits 6 and 7) of the
            //        clock_seq_hi_and_reserved to zero and one, respectively.
            //     Set the four most significant bits (bits 12 through 15) of the
  ");
                WriteLiteral(@"          //        time_hi_and_version field to the 4-bit version number from
            //        Section 4.1.3. Version4
            //     Set all the other bits to randomly (or pseudo-randomly) chosen
            //     values.
            // UUID                   = time-low ""-"" time-mid ""-""time-high-and-version ""-""clock-seq-reserved and low(2hexOctet)""-"" node
            // time-low               = 4hexOctet
            // time-mid               = 2hexOctet
            // time-high-and-version  = 2hexOctet
            // clock-seq-and-reserved = hexOctet:
            // clock-seq-low          = hexOctet
            // node                   = 6hexOctet
            // Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
            // y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10
            // y values are 8, 9, A, B
            let cryptoObj = window.crypto || window.msCrypto; // for IE 11
            if (cryptoObj && cryptoObj.getRandomValues) {
           ");
                WriteLiteral(@"     let buffer = new Uint8Array(16);
                cryptoObj.getRandomValues(buffer);
                //buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
                buffer[6] |= 0x40; //buffer[6] | 01000000 will set the 6 bit to 1.
                buffer[6] &= 0x4f; //buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = ""4"".
                //buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
                buffer[8] |= 0x80; //buffer[8] | 10000000 will set the 7 bit to 1.
                buffer[8] &= 0xbf; //buffer[8] & 10111111 will set the 6 bit to 0.
                return (
                    _decimalToHex(buffer[0]) +
                        _decimalToHex(buffer[1]) +
                        _de");
                WriteLiteral(@"cimalToHex(buffer[2]) +
                        _decimalToHex(buffer[3]) +
                        ""-"" +
                        _decimalToHex(buffer[4]) +
                        _decimalToHex(buffer[5]) +
                        ""-"" +
                        _decimalToHex(buffer[6]) +
                        _decimalToHex(buffer[7]) +
                        ""-"" +
                        _decimalToHex(buffer[8]) +
                        _decimalToHex(buffer[9]) +
                        ""-"" +
                        _decimalToHex(buffer[10]) +
                        _decimalToHex(buffer[11]) +
                        _decimalToHex(buffer[12]) +
                        _decimalToHex(buffer[13]) +
                        _decimalToHex(buffer[14]) +
                        _decimalToHex(buffer[15])
                );
            } else {
                let guidHolder = ""xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"";
                let hex = ""0123456789abcdef"";
                let r = 0;
    ");
                WriteLiteral(@"            let guidResponse = """";
                for (let i = 0; i < 36; i++) {
                    if (guidHolder[i] !== ""-"" && guidHolder[i] !== ""4"") {
                        // each x and y needs to be random
                        r = (Math.random() * 16) | 0;
                    }
                    if (guidHolder[i] === ""x"") {
                        guidResponse += hex[r];
                    } else if (guidHolder[i] === ""y"") {
                        // clock-seq-and-reserved first hex is filtered and remaining hex values are random
                        r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
                        r |= 0x8; // set pos 3 to 1 as 1???
                        guidResponse += hex[r];
                    } else {
                        guidResponse += guidHolder[i];
                    }
                }
                return guidResponse;
            }
        }
    </script>
");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
